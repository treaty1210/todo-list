(()=>{"use strict";const e=function(e,t,n,r){this.title=e,this.description=t,this.dueDate=n,this.priority=r},t=function(){console.log("testing createProject module");let e=[],t="Default Title";return e.push(t),console.log(e),{projectArray:e,projectTitle:t}};Math.pow(10,8);var n=36e5;function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e,t){var o;r(1,arguments);var g=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(o=null==t?void 0:t.additionalDigits)&&void 0!==o?o:2);if(2!==g&&1!==g&&0!==g)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var f,p=function(e){var t,n={},r=e.split(a.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],a.timeZoneDelimiter.test(n.date)&&(n.date=e.split(a.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=a.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}(e);if(p.date){var y=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(p.date,g);f=function(e,t){if(null===t)return new Date(NaN);var n=e.match(i);if(!n)return new Date(NaN);var r=!!n[4],o=c(n[1]),a=c(n[2])-1,l=c(n[3]),u=c(n[4]),s=c(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,u,s)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,u,s):new Date(NaN);var g=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(d[t]||(m(e)?29:28))}(t,a,l)&&function(e,t){return t>=1&&t<=(m(e)?366:365)}(t,o)?(g.setUTCFullYear(t,a,Math.max(o,l)),g):new Date(NaN)}(y.restDateString,y.year)}if(!f||isNaN(f.getTime()))return new Date(NaN);var D,v=f.getTime(),N=0;if(p.time&&(N=function(e){var t=e.match(l);if(!t)return NaN;var r=s(t[1]),o=s(t[2]),a=s(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(r,o,a)?r*n+6e4*o+1e3*a:NaN}(p.time),isNaN(N)))return new Date(NaN);if(!p.timezone){var h=new Date(v+N),w=new Date(0);return w.setFullYear(h.getUTCFullYear(),h.getUTCMonth(),h.getUTCDate()),w.setHours(h.getUTCHours(),h.getUTCMinutes(),h.getUTCSeconds(),h.getUTCMilliseconds()),w}return D=function(e){if("Z"===e)return 0;var t=e.match(u);if(!t)return 0;var r="+"===t[1]?-1:1,o=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?r*(o*n+6e4*a):NaN}(p.timezone),isNaN(D)?new Date(NaN):new Date(v+N+D)}var a={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},i=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,l=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,u=/^([+-])(\d{2})(?::?(\d{2}))?$/;function c(e){return e?parseInt(e):1}function s(e){return e&&parseFloat(e.replace(",","."))||0}var d=[31,null,31,30,31,30,31,31,30,31,30,31];function m(e){return e%400==0||e%4==0&&e%100!=0}function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function f(){return function(e){r(1,arguments);var t=function(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===g(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e);return t.setHours(0,0,0,0),t}(Date.now())}console.log("createItem loaded");const p=function(e,t,n,r){return localStorage.setItem("title",document.getElementById("title").value),localStorage.setItem("description",document.getElementById("description").value),localStorage.setItem("dueDate",document.getElementById("dueDate").value),localStorage.setItem("priority",document.getElementById("priority").value),function(){let e=document.querySelector(".projects"),t=document.createElement("div");t.classList.add("projectCards"),e.appendChild(t);let n={title:localStorage.getItem("title"),description:localStorage.getItem("description"),dueDate:localStorage.getItem("dueDate"),priority:localStorage.getItem("priority")};console.log("this is the currentProject array:",n);for(let e in n){let r=document.createElement("p");r.textContent=`${e}: ${n[e]}`,t.appendChild(r)}}(),{title:e,description:t,dueDate:n,priority:r}};t(),function(){const e=document.querySelector(".content"),n=document.createElement("div");n.textContent=t().projectTitle,e.appendChild(n)}(),document.querySelector("#createItem").addEventListener("click",(t=>{t.preventDefault(),function(){let e=document.getElementById("title").value,t=document.getElementById("description").value,n=document.getElementById("dueDate").value,r=document.getElementById("priority").value;if(console.log("title:",e,"description:",t,"dueDate:",n,"priority:",r),""!=e&&""!=t&&""!=n)return o(n)<f()?(alert("Invalid Date. Date must be set in the future."),console.log("Due date:",o(n)),void console.log("Current date:",f())):void 0;alert("Please fill out the missing area")}();let n=new e(title,description,dueDate,priority);console.log(n),p()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,